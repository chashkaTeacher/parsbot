# formatting.py
import re
from tabulate import tabulate


def format_table(table_data: list) -> str:
    if not table_data:
        return ""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤. –ï—Å–ª–∏ –∫–ª—é—á–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —á–∏—Å–ª–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫, –º–æ–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö:
    headers = sorted(table_data[0].keys(), key=lambda x: int(x) if x.isdigit() else x)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:
    rows = [[str(row.get(header, "")) for header in headers] for row in table_data]
    # –í—ã–∑—ã–≤–∞–µ–º tabulate –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ headers ‚Äì —Ç–æ–≥–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –≤—ã–≤–æ–¥—è—Ç—Å—è.
    table_str = tabulate(rows, tablefmt="grid", stralign="center")
    return table_str

def clean_task_text(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:
    1. –£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ).
    2. –£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
    3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
    4. **–û—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É "–û—Ç–≤–µ—Ç:" –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ**
    """

    lines = text.splitlines()
    output_lines = []
    in_table_block = False

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (—Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, F, ?)
    table_line_pattern = re.compile(r"^[0-9\?\sF]+$")

    for line in lines:
        stripped = line.strip()

        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
        if stripped and table_line_pattern.fullmatch(stripped) and len(stripped) < 20:
            in_table_block = True
            continue
        else:
            if in_table_block:
                in_table_block = False
            output_lines.append(line)

    cleaned_text = "\n".join(output_lines)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
    cleaned_text = re.sub(r"\n+(\?[\s\?F\d]+)", r"\n\1", cleaned_text)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ ("–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ", "–í –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ" –∏ —Ç.–¥.)
    cleaned_text = re.sub(r"\n+(–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ|–í –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ)", r"\n\1", cleaned_text)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫, **–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Ç–æ–º –∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏**,
    # –Ω–æ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º "–û—Ç–≤–µ—Ç:", –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    cleaned_text = re.sub(r"(?<!\.)\n(?!\n|–û—Ç–≤–µ—Ç:)", " ", cleaned_text)

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ **"–û—Ç–≤–µ—Ç:" –≤—Å–µ–≥–¥–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏**
    cleaned_text = re.sub(r"(\S)\s*(–û—Ç–≤–µ—Ç:)", r"\1\n\n\2", cleaned_text)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    cleaned_text = re.sub(r"\s{2,}", " ", cleaned_text)

    return cleaned_text.strip()




def format_logical_expression(text: str) -> str:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ <pre>...</pre>.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç:
    - –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤ "—Ñ—É–Ω–∫—Ü–∏—è", "–≤—ã—Ä–∞–∂–µ–Ω–∏–µ", "—Ñ–æ—Ä–º—É–ª–∞".
    - –ù–∞–ª–∏—á–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è `:` –ø–æ—Å–ª–µ "–≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º".
    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —á–∞—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–¥–∏–Ω–æ—á–Ω–æ–π `F`).
    """

    # üî• –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    logical_ops = "‚àß‚à®¬¨‚Üí‚Üê‚Üî‚à©‚à™‚â°‚äï‚áî‚äô‚ä§‚ä•"

    # üõ† –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    pattern = re.compile(
        r"(\b(?:—Ñ—É–Ω–∫—Ü–∏(?:—è|–∏|–µ–π|—é|—è–º|—è–º–∏|—è—Ö)|–≤—ã—Ä–∞–∂–µ–Ω–∏(?:–µ|—è|–µ–º|—é|–∏|—è–º|—è–º–∏|—è—Ö)|—Ñ–æ—Ä–º—É–ª(?:–∞|–æ–π|—ã|–µ|—É|–∞–º–∏|–∞—Ö))\s*:?\s*)"  # "–§—É–Ω–∫—Ü–∏—è", "–≤—ã—Ä–∞–∂–µ–Ω–∏–µ" –∏–ª–∏ "—Ñ–æ—Ä–º—É–ª–∞" + –¥–≤–æ–µ—Ç–æ—á–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        r"([^\n]+?)"  # üõ† –°–∞–º–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–≤—Å–µ —Å–∏–º–≤–æ–ª—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è)
        r"\s*(?:–Ω–æ\s+—É—Å–ø–µ–ª|–Ω–∞\s+—Ä–∏—Å—É–Ω–∫–µ|–∫–æ—Ç–æ—Ä–∞—è\s+–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç|–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ|—Å–æ–¥–µ—Ä–∂–∏—Ç|–∏–∑–æ–±—Ä–∞–∂–µ–Ω(?:–Ω—ã–π|–Ω–∞—è)|[,.])",  # –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–∏ –ø–æ—Å–ª–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        re.IGNORECASE | re.DOTALL
    )

    def repl(match):
        prefix = match.group(1)  # –°–ª–æ–≤–æ "—Ñ—É–Ω–∫—Ü–∏—è", "–≤—ã—Ä–∞–∂–µ–Ω–∏–µ" –∏–ª–∏ "—Ñ–æ—Ä–º—É–ª–∞"
        expr = match.group(2).strip()  # –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ "F" –±–µ–∑ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        if expr.strip().upper() == "F":
            return match.group(0)  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å, –Ω–µ –≤—ã–¥–µ–ª—è–µ–º "F"

        return f"{prefix}<pre>{expr}</pre>"

    return pattern.sub(repl, text, count=1)




def clean_and_format_task_text(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω—é—é —Ç–∞–±–ª–∏—Ü—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ <pre> ... </pre>.
    """
    cleaned = clean_task_text(text)
    formatted = format_logical_expression(cleaned)
    return formatted


