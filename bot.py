# bot.py
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN  # –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å BOT_TOKEN, JSON_DIR, IMAGES_DIR –∏ —Ç.–¥.
from task_loader import get_random_task
from formatting import clean_and_format_task_text, format_table
from utils import get_image_path
import os

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logging.getLogger("httpx").setLevel(logging.WARNING)




async def start(update: Update = None, context: ContextTypes.DEFAULT_TYPE = None, force_run: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    logger.info("üöÄ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")

    # –ï—Å–ª–∏ update –∏ context –Ω–µ—Ç (–±–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø—É—â–µ–Ω), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π chat_id
    chat_id = update.message.chat_id if update else context.bot_data.get('chat_id')

    if not chat_id:
        logger.info("‚ö† chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–º–∞–Ω–¥–∞ /start –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        return

    context.bot_data['chat_id'] = chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id

    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 1", callback_data="task_1"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 2", callback_data="task_2"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 3", callback_data="task_3")],
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 4", callback_data="task_4"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 8", callback_data="task_8"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 9", callback_data="task_9")],
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 17", callback_data="task_17"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 22", callback_data="task_22"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 27", callback_data="task_27")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await context.bot.send_message(chat_id=chat_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=reply_markup)

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫
    logger.info(f"üìå –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è: {message.message_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏—Ö —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
    context.bot_data.setdefault('message_ids', []).append(message.message_id)


async def display_task(query: Update, task_number: str, difficulty: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    task = get_random_task(task_number, difficulty)
    if not task:
        await query.edit_message_text("–ó–∞–¥–∞–Ω–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    task_text = task.get('task', '–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    task_answer = task.get('answer', '–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    diff_text = task.get('difficulty', '–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

    # ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    formatted_task_text = clean_and_format_task_text(task_text)

    raw_response = (
        f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ <code>{task.get('id', 'N/A')}</code> ({diff_text}):\n\n"
        f"{formatted_task_text}\n\n"
        f"–û—Ç–≤–µ—Ç:<tg-spoiler> {task_answer}</tg-spoiler>"
    )

    if task.get("table"):
        table_text = format_table(task.get("table"))
        raw_response += "\n\n<b>–¢–∞–±–ª–∏—Ü–∞:</b>\n<pre>" + table_text + "</pre>"

    formatted_text = raw_response

    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"difficulty_{task_number}_{difficulty}")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å", callback_data=f"change_difficulty_{task_number}"),
         InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # üñº **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)**
    images = task.get("images", [])
    image_path = get_image_path(task_number, task) if images else None
    has_image = bool(image_path)

    # üìÇ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)**
    file_paths = [os.path.normpath(fp) for fp in task.get("files", []) if os.path.exists(fp)]
    has_files = bool(file_paths)

    # üóë **–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –≤ JSON –µ—Å—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**
    if has_files or has_image:
        if 'current_file_messages' in context.user_data:
            for file_msg in context.user_data['current_file_messages']:
                try:
                    await file_msg.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            context.user_data.pop('current_file_messages', None)

        if 'current_image_message' in context.user_data:
            try:
                await context.user_data['current_image_message'].delete()
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %s", e)
            context.user_data.pop('current_image_message', None)

        if 'current_text_message' in context.user_data:
            try:
                await context.user_data['current_text_message'].delete()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            context.user_data.pop('current_text_message', None)

    # üìù **–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤**
    elif 'current_text_message' in context.user_data:
        try:
            await context.user_data['current_text_message'].edit_text(
                text=formatted_text,
                parse_mode="HTML",
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            logger.info("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—Å—Ç —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è: {e}")

    # üñº **–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å**
    if image_path:
        try:
            with open(image_path, 'rb') as img_file:
                image_msg = await query.message.reply_photo(
                    photo=img_file,
                    caption="–ó–∞–¥–∞–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:",
                    parse_mode="HTML"
                )
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            context.user_data['current_image_message'] = image_msg
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
            await query.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", parse_mode="HTML")

    # üìÇ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**
    file_messages = []
    if has_files and not has_image:
        for file_path in file_paths:
            file_name = os.path.basename(file_path)
            try:
                doc_msg = await query.message.reply_document(
                    document=open(file_path, 'rb'),
                    caption=f"üìÑ {file_name} (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å)"
                )
                file_messages.append(doc_msg)
                logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")

        context.user_data['current_file_messages'] = file_messages

    # üìù **–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**
    task_message = await query.message.reply_text(
        text=formatted_text,
        parse_mode="HTML",
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )
    context.user_data['current_text_message'] = task_message
    logger.info("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    # üìÇ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –±—ã–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ**
    if has_files and has_image:
        for file_path in file_paths:
            file_name = os.path.basename(file_path)
            try:
                doc_msg = await query.message.reply_document(
                    document=open(file_path, 'rb'),
                    caption=f"üìÑ {file_name} (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å)"
                )
                file_messages.append(doc_msg)
                logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")

        context.user_data['current_file_messages'] = file_messages

    # üóë **–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏**
    if 'difficulty_message' in context.user_data:
        try:
            await context.user_data['difficulty_message'].delete()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: %s", e)
        context.user_data.pop('difficulty_message', None)


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("task_"):
        task_number = data.split("_")[1]
        context.user_data["current_task"] = task_number
        keyboard = [
            [InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π", callback_data=f"difficulty_{task_number}_base"),
             InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data=f"difficulty_{task_number}_medium"),
             InlineKeyboardButton("–õ—é–±–æ–π", callback_data=f"difficulty_{task_number}_any")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = await query.edit_message_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_number}:",
            reply_markup=reply_markup
        )
        context.user_data['difficulty_message'] = message

    elif data.startswith("difficulty_"):
        parts = data.split("_")
        if len(parts) >= 3:
            _, task_number, difficulty = parts
            await display_task(query, task_number, difficulty, context)
        else:
            await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    elif data.startswith("change_difficulty_"):
        task_number = data.split("_")[2]

        # üóë **–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏**
        if 'current_file_messages' in context.user_data:
            for file_msg in context.user_data['current_file_messages']:
                try:
                    await file_msg.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            context.user_data.pop('current_file_messages', None)

        # üóë **–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏**
        if 'current_image_message' in context.user_data:
            try:
                await context.user_data['current_image_message'].delete()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            context.user_data.pop('current_image_message', None)

        keyboard = [
            [InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π", callback_data=f"difficulty_{task_number}_base"),
             InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data=f"difficulty_{task_number}_medium"),
             InlineKeyboardButton("–õ—é–±–æ–π", callback_data=f"difficulty_{task_number}_any")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = await query.edit_message_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_number}:",
            reply_markup=reply_markup
        )
        context.user_data['difficulty_message'] = message

    elif data == "back_to_menu":
        # üóë **–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é**
        if 'current_file_messages' in context.user_data:
            for file_msg in context.user_data['current_file_messages']:
                try:
                    await file_msg.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            context.user_data.pop('current_file_messages', None)

        # üóë **–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é**
        if 'current_image_message' in context.user_data:
            try:
                await context.user_data['current_image_message'].delete()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            context.user_data.pop('current_image_message', None)

        keyboard = [
            [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 1", callback_data="task_1"),
             InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 2", callback_data="task_2"),
             InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 3", callback_data="task_3")],
            [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 4", callback_data="task_4"),
             InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 8", callback_data="task_8"),
             InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 9", callback_data="task_9")],
            [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 17", callback_data="task_17"),
             InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 22", callback_data="task_22"),
             InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 27", callback_data="task_27")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = await query.edit_message_text(
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
            reply_markup=reply_markup
        )
        context.user_data['difficulty_message'] = message



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 1", callback_data="task_1"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 2", callback_data="task_2"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 3", callback_data="task_3")],
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 4", callback_data="task_4"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 8", callback_data="task_8"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 9", callback_data="task_9")],
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 17", callback_data="task_17"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 22", callback_data="task_22"),
         InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 27", callback_data="task_27")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=reply_markup)
    context.user_data['difficulty_message'] = message


def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    logger.info("üõ† –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

    logger.info("‚ö† –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.")


if __name__ == "__main__":
    main()
